<?php

namespace App\Models;

use App\Traits\HandleInput;
use App\Traits\HandleSearch;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class MUserTalkGroupRequest extends Model
{
    use HandleInput;
    use HandleSearch;
    use HasFactory;
    use SoftDeletes;

    protected $table = 'm_user_talk_group_requests';

    // Optional properties
    protected $search = ['group_id', 'name'];

    /**
     * Get the user associated with the request.
     */
    public function request()
    {
        return $this->belongsTo(MUserRequest::class, 'request_id');
    }

    static public function columnConstraints()
    {
        return [
            'requestId' => 'required|integer',
            'userId' => 'required|integer',
            'shopId' => 'required|integer',
            'groupName' => 'required|max:255',
            'rowNum' => 'required|integer',
            'status' => 'nullable|max:3',
            'groupResponsiblePerson' => 'required|max:255',
            'groupMemberView' => 'required',
            'groupPriority' => 'required',
        ];
    }

    public function __get($key)
    {
        $value = parent::__get($key); // TODO: Change the autogenerated stub

        if ($value !== null) {
            if (in_array($key, ['request_type'])) {
                return $this->getAddModifyColumn($value);
            }

            if (in_array($key, [ 'member_view', 'status'])) {
                return $this->getOnOffColumn($value);
            }

            if (in_array($key, ['priority'])) {
                return $this->getPriorityColumn($value);
            }
        }

        return $value;
    }

    private function getPriorityColumn($value)
    {
        switch ($value) {
            case '1':
                return __('Level 1');
            case '2':
                return __('Level 2');
            case '3':
                return __('Level 3');
            case '4':
                return __('Level 4');
            case '5':
                return __('Level 5');
            case '6':
                return __('Level 6');
            case '7':
                return __('Level 7');
            case '8':
                return __('Level 8');
            case '9':
                return __('Level 9');
            case '10':
                return __('Level 10');
        }
    }

    private function getAddModifyColumn($value)
    {
        return $value == '1' ? __('Add') : __('Modify');
    }

    private function getOnOffColumn($value)
    {
        return $value == '1' ? __('on') : __('off');
    }
}
